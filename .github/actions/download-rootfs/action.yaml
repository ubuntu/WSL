name: Download Ubuntu WSL Rootfs
description: Download the latest Rootfs for a particular release of Ubuntu WSL

inputs:
  distros:
    description: Space-separated list of distros to download
    required: true
    default: "Ubuntu"
  path:
    description: Directory to store the rootfs in (${path}\${distro}.tar.gz)
    required: true
    default: "Ubuntu"

runs:
  using: "composite"
  steps:
    - name: Check out repo
      uses: actions/checkout@v3
    - name: Install python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install dependencies
      shell: powershell
      run: python -m pip install launchpadlib
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: "1.21.4"
    - name: Generate WSL release info
      shell: powershell
      # Repository root
      working-directory: ${{ github.action_path }}\..\..\..\
      run: |
        # Prepare environment

        # Install PowerShell
        winget install --id Microsoft.Powershell --silent --accept-package-agreements --accept-source-agreements --source winget

        Write-Output "::group::Build wsl release info generator"
        go build .\wsl-builder\release-info\
        if ( "${LastExitCode}" -ne "0" ) {
          Write-Output "::endgroup::"
          Exit(1)
        }
        Write-Output "::endgroup::"

        Write-Output "::group::Fetch release info"
        python .\wsl-builder\lp-distro-info -o "${{ inputs.path }}\ubuntu-releases.csv"
        Get-Content "${{ inputs.path }}\ubuntu-releases.csv"
        Write-Output "::endgroup::"
               
        Write-Output "::group::Filter release info"
        if(!(Test-Path "${{ inputs.path }}")) {
          New-Item -Type Directory -Path "${{ inputs.path }}"
        }
        .\release-info.exe "${{ inputs.path }}\ubuntu-releases.csv" ${{ inputs.distros }} --rootfs amd64 --short 1> "${{ inputs.path }}\wsl-releases.csv"
        Write-Output "::endgroup::"

        # Check for success
        if (Test-Path "${{ inputs.path }}\wsl-releases.csv") {
          Exit(0)
        }
        Write-Error "Did not write WSL releases file"
        Exit(1)
    - name: Download Ubuntu rootfs
      shell: powershell
      run: |
        # Download rootfs
        cd "${{ inputs.path }}"

        $releaseList = $(Get-Content "wsl-releases.csv") -split "\n"
        $allSuccess = $true

        foreach ($release in $releaseList) {
          $data = $release -split "\s+"

          if ($data.Count -lt 2) {
            Write-Output "Error: not enough fields in release info: $release"
            $allSuccess = $false
            continue
          }

          # $name is the one in inputs.distros
          $name = $data[0]
          $url = $data[1]

          if ($name.Length -eq 0 -or $url.Length -eq 0) {
            Write-Output "Error: empty fields in release info: $release"
            $allSuccess = $false
            continue
          }

          $file = ".\${name}.tar.gz"

          Write-Output "Saving $($url[0..19] -join '')***$($url[-19..-1] -join '') to $file"

          & ${{ github.action_path }}\download-rootfs.ps1 -Path "${file}" -URL "$url"
          if ( ! $? ) {
            $allSuccess = $false
            Write-Output "Error: Could not download ${name}"
          }

          $allSuccess = $true
          Write-Output "::endgroup::"
        }

        if ( "${allSuccess}" -eq "$false" ) {
            Exit(1)
        }
        Exit(0)
    - name: Cleanup
      if: always()
      shell: powershell
      run: |
        # Cleanup
        Remove-Item "${{ inputs.path }}\ubuntu-releases.csv" 2>&1 | Out-Null
        Remove-Item "${{ inputs.path }}\wsl-releases.csv"    2>&1 | Out-Null
        Exit(0)
